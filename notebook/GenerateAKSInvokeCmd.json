{
	"name": "GenerateAKSInvokeCmd",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "poollofkzx",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "036557c2-e0c3-4e7e-9a7d-72b0a28621c7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourceGroups/syansb21-pipeline-rg/providers/Microsoft.Synapse/workspaces/syansb21-pipeline-syn-ws/bigDataPools/poollofkzx",
				"name": "poollofkzx",
				"type": "Spark",
				"endpoint": "https://syansb21-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/poollofkzx",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import base64\r\n",
					"from zipfile import ZipFile\r\n",
					"import json\r\n",
					"\r\n",
					"test_job_template = \"\"\"\r\n",
					"{\r\n",
					"    \"apiVersion\": \"batch/v1\",\r\n",
					"    \"kind\": \"Job\",\r\n",
					"    \"metadata\": {\r\n",
					"      \"name\": \"testjob\",\r\n",
					"      \"namespace\": \"tests\",\r\n",
					"      \"labels\": {\r\n",
					"        \"app\": \"busybox\"\r\n",
					"      }\r\n",
					"    },\r\n",
					"    \"spec\": {\r\n",
					"      \"ttlSecondsAfterFinished\": 10,\r\n",
					"      \"template\": {\r\n",
					"        \"spec\": {\r\n",
					"          \"containers\": [\r\n",
					"            {\r\n",
					"              \"name\": \"busybox\",\r\n",
					"              \"image\": \"busybox\",\r\n",
					"              \"args\": [\r\n",
					"                \"bin/sh\",\r\n",
					"                \"-c\",\r\n",
					"                \"echo test;sleep 30; exit 0\"\r\n",
					"              ]\r\n",
					"            }\r\n",
					"          ],\r\n",
					"          \"restartPolicy\": \"Never\"\r\n",
					"        }\r\n",
					"      }\r\n",
					"    }\r\n",
					"}\r\n",
					"\"\"\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_job_file(output_file_name='test_job.json'):\r\n",
					"    with open(output_file_name, 'w') as output:\r\n",
					"        output.write(test_job_template)\r\n",
					"\r\n",
					"def create_zip_job_file(zip_file_name='test_job.zip', lst_files=['test_job.json']):\r\n",
					"    with ZipFile(zip_file_name, 'w') as zipObj:\r\n",
					"        for file in lst_files:\r\n",
					"            zipObj.write(file)\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create_job_file()\r\n",
					"create_zip_job_file()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def gen_base64_encoded_aks_cmd_file(zip_file_name='test_job.zip', output_file_name='aks_invoke_cmd.txt'):\r\n",
					"\r\n",
					"    with open(zip_file_name, 'rb') as input_zip_file:\r\n",
					"        content = base64.b64encode(input_zip_file.read()).decode('ascii')\r\n",
					"    aks_deployment_cmd = {\r\n",
					"        \"command\": \"kubectl apply -f test_job.json\",\r\n",
					"        \"context\": content\r\n",
					"    }\r\n",
					"    aks_deployment_cmd_json = json.dumps(aks_deployment_cmd)\r\n",
					"    with open(output_file_name, \"w\") as i :\r\n",
					"        json.dump(json.dumps(aks_deployment_cmd_json), i)\r\n",
					"    return aks_deployment_cmd_json\r\n",
					"\r\n",
					"aks_deployment_cmd_json = gen_base64_encoded_aks_cmd_file()\r\n",
					""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#sc = SparkSession.builder.getOrCreate()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"#storage_account_key = token_library.getSecret(args.key_vault_name, args.storage_account_key_secret_name, args.linked_service_name)\r\n",
					"#storage_account_key = token_library.getSecret('syansb21-pipeline-kv', 'GeospatialStorageAccountKey', 'AOI Pipeline Key Vault')\r\n",
					"storage_account_key = 'hzqIHgxtcocmjGUzrvxaBcrT4Ie6byW04e04DHf4eBg7fZ5YIbxD84mBKhxNAo9kIoBGOu+ZRVMh+AStfalyKg=='\r\n",
					"print(storage_account_key)"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"mssparkutils.fs.unmount(f'/testme')\r\n",
					"\r\n",
					"mssparkutils.fs.mount( \r\n",
					"        f'abfss://testme@rawdatadppktx.dfs.core.windows.net', \r\n",
					"        f'/testme', \r\n",
					"        {\"accountKey\": storage_account_key} \r\n",
					"    )"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.ls('/testme')"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.put(f'/testme/batch/test_job_cmd.txt', aks_deployment_cmd_json, True)"
				],
				"execution_count": 37
			}
		]
	}
}