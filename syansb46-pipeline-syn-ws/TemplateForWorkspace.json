{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syansb46-pipeline-syn-ws"
		},
		"AOI Batch Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Batch Storage'"
		},
		"AOI Data Storage Account v2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Data Storage Account v2'"
		},
		"AOI Geospatial v2 FS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Geospatial v2 FS'"
		},
		"syansb46-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syansb46-pipeline-syn-ws-WorkspaceDefaultSqlServer'"
		},
		"AOI Batch_properties_typeProperties_batchUri": {
			"type": "string",
			"defaultValue": "https://__batch_account__.__location__.batch.azure.com"
		},
		"AOI Batch_properties_typeProperties_poolName": {
			"type": "string",
			"defaultValue": "data-cpu-pool"
		},
		"AOI Batch_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "__batch_account__"
		},
		"AOI Geospatial v2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rawdata7svgx7.dfs.core.windows.net"
		},
		"AOI Pipeline Key Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://syansb46-pipeline-kv.vault.azure.net/"
		},
		"GenBase64Encoding_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://syansb46-orc-fapp.azurewebsites.net"
		},
		"syansb46-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synhns3prxhf.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Custom Vision Model Transforms v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transforms",
						"type": "SparkJob",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Transforms",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/customvision_transform/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--key_vault_name",
								"syansb46-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault",
								"--aoi",
								"@split(pipeline().parameters.AOI, ' ')[0]",
								"@split(pipeline().parameters.AOI, ' ')[1]",
								"@split(pipeline().parameters.AOI, ' ')[2]",
								"@split(pipeline().parameters.AOI, ' ')[3]"
							],
							"targetBigDataPool": {
								"referenceName": "pool3prxhf",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"AOI": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T06:06:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Transforms')]",
				"[concat(variables('workspaceId'), '/bigDataPools/pool3prxhf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Custom Vision Object Detection v2_aks')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Pool Geolocation",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Copy Xml",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Pool Geolocation",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/pool_geolocation/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"detections",
								"--key_vault_name",
								"syansb46-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault"
							],
							"targetBigDataPool": {
								"referenceName": "pool3prxhf",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Json",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait for Custom Vision",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/json')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "gls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "gld",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFolderPath": "detections",
									"DestinationContainerName": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Xml",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait for Custom Vision",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/other')",
										"type": "Expression"
									},
									"wildcardFileName": "*.xml",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "gls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "gld",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFolderPath": "detections",
									"DestinationContainerName": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Read Spec Document",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ReadSpecDocumentFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"filename": "custom_vision_object_detection.json",
										"folderpath": "config",
										"containername": {
											"value": "@pipeline().parameters.Prefix",
											"type": "Expression"
										}
									},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Copy Tiles",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"maxConcurrentConnections": 15,
									"recursive": true,
									"wildcardFolderPath": "tiles",
									"wildcardFileName": "*.png",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"maxConcurrentConnections": 15
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "run_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folder_path": "tiles"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Config",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"maxConcurrentConnections": 15,
									"recursive": true,
									"wildcardFolderPath": "config",
									"wildcardFileName": {
										"value": "@activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName']",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"maxConcurrentConnections": 15
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "run_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folder_path": "config"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Georeference Xml",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"maxConcurrentConnections": 15,
									"recursive": true,
									"wildcardFolderPath": "convert",
									"wildcardFileName": "*.aux.xml",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"maxConcurrentConnections": 15
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "run_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folder_path": "convert"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Create Results Directory with placeholder",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"maxConcurrentConnections": 15,
									"recursive": true,
									"wildcardFolderPath": "config",
									"wildcardFileName": {
										"value": "@activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName']",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"maxConcurrentConnections": 15
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "run_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folder_path": "config"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Create Logs Directory with placeholder_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"maxConcurrentConnections": 15,
									"recursive": true,
									"wildcardFolderPath": "config",
									"wildcardFileName": {
										"value": "@activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName']",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"maxConcurrentConnections": 15
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "run_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folder_path": "config"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['logsDirectory'])",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Results Directory placeholder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Create Results Directory with placeholder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AOI Geospatial v2",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Logs Directory placeholder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Create Logs Directory with placeholder_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "run_fileshare",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['logsDirectory'])",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AOI Geospatial v2",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Gen SpecZipBase64Encoding",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Delete Results Directory placeholder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Logs Directory placeholder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Tiles",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Config",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Georeference Xml",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "base64EncodedZipContent",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@json(concat('{\n    \"apiVersion\": \"batch/v1\",\n    \"kind\": \"Job\",\n    \"metadata\": {\n      \"name\": \"aoi-cv-task\",\n      \"namespace\": \"vision\",\n      \"labels\": {\n        \"run_id\": \"',pipeline().RunId, '\",\n      }\n    },\n    \"spec\": {\n      \"ttlSecondsAfterFinished\": 5,\n      \"template\": {\n        \"spec\": {\n          \"containers\": [\n            {\n              \"name\": \"aoi-cv-task-xyz\",\n              \"image\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['algImageName'] ,'\",\n              \"env\": [\n                {\n                  \"name\": \"APP_INPUT_DIR\",\n                  \"value\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'] , '/',pipeline().parameters.Prefix,'/' , activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'],'\"\n                },\n                {\n                  \"name\": \"APP_OUTPUT_DIR\",\n                  \"value\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'] , '/',pipeline().parameters.Prefix,'/' , activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'],'\"\n                },\n                {\n                  \"name\": \"APP_CONFIG_DIR\",\n                  \"value\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'] , '/',pipeline().parameters.Prefix,'/' , activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'],'\"\n                }\n              ],\n              \"volumeMounts\": [\n                {\n                  \"name\": \"azure\",\n                  \"mountPath\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'], '\"\n                }\n              ]\n            }\n          ],\n          \"volumes\": [\n            {\n              \"name\": \"azure\",\n              \"persistentVolumeClaim\": {\n                \"claimName\": \"', pipeline().parameters.PersistentVolumeClaim, '\"\n              }\n            }\n          ],\n          \"automountServiceAccountToken\": false,\n          \"restartPolicy\": \"Never\"\n        }\n      }\n    }\n}'))",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "GenBase64Encoding",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set SpecZipBase64Encoded",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Gen SpecZipBase64Encoding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "KubeCmdSpecInBase64Encoded",
							"value": {
								"value": "@activity('Gen SpecZipBase64Encoding').output.Response",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Workload in AKS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set SpecZipBase64Encoded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.AksManagementRestApiURL",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat(\n'{',\n'\"command\" : \"', 'kubectl apply -f aoi-cv-task.json', '\",',\n'\"context\" : \"', variables('KubeCmdSpecInBase64Encoded'), '\"',\n'}'\n))",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net"
							}
						}
					},
					{
						"name": "Wait for Custom Vision",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Invoke Workload in AKS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('KubeJobStatusCheckResult'),'No resources found')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check Job Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.AksManagementRestApiURL",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{',\n'\"command\" : \"', 'kubectl -n vision get jobs --selector run_id=', pipeline().RunId ,' \"',\n'}'\n)",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net"
										}
									}
								},
								{
									"name": "Set JobStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check Job Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "KubeJobStatusCheckResult",
										"value": {
											"value": "@activity('Check Job Status').output['properties']['logs']\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 15
									}
								}
							],
							"timeout": "3.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"AksManagementRestApiURL": {
						"type": "string",
						"defaultValue": "https://management.azure.com/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourcegroups/syansb46-orc-rg/providers/Microsoft.ContainerService/managedClusters/syansb46orcaks/runCommand?api-version=2022-02-01"
					},
					"PersistentVolumeClaim": {
						"type": "string",
						"defaultValue": "syansb46-vision-fileshare"
					}
				},
				"variables": {
					"KubeCmdSpecInBase64Encoded": {
						"type": "String"
					},
					"KubeJobStatusCheckResult": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T05:52:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Pool Geolocation')]",
				"[concat(variables('workspaceId'), '/bigDataPools/pool3prxhf')]",
				"[concat(variables('workspaceId'), '/datasets/gls')]",
				"[concat(variables('workspaceId'), '/datasets/gld')]",
				"[concat(variables('workspaceId'), '/dataflows/ReadSpecDocumentFlow')]",
				"[concat(variables('workspaceId'), '/datasets/run_container')]",
				"[concat(variables('workspaceId'), '/datasets/run_fileshare')]",
				"[concat(variables('workspaceId'), '/linkedServices/GenBase64Encoding')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2E Custom Vision Model Flow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transforms",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Custom Vision Model Transforms v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"AOI": {
									"value": "@pipeline().parameters.AOI",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Custom Vision Object Detection with AKS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transforms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Custom Vision Object Detection v2_aks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"AksManagementRestApiURL": {
									"value": "@pipeline().parameters.AksManagementRestApiURL",
									"type": "Expression"
								},
								"PersistentVolumeClaim": {
									"value": "@pipeline().parameters.PersistentVolumeClaim",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Insert CV Object Detection Data Into DB",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Custom Vision Object Detection with AKS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Insert CV Object Detection Data Into DB Notebook Job",
								"type": "NotebookReference"
							},
							"parameters": {
								"storage_account_name": {
									"value": {
										"value": "@pipeline().parameters.StorageAccountName",
										"type": "Expression"
									},
									"type": "string"
								},
								"container_name": {
									"value": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"type": "string"
								},
								"folder_path": {
									"value": "pool-geolocation",
									"type": "string"
								},
								"key_vault_name": {
									"value": "syansb46-pipeline-kv",
									"type": "string"
								},
								"storage_account_key_secret_name": {
									"value": "GeospatialStorageAccountKey",
									"type": "string"
								},
								"linked_service_name": {
									"value": "AOI Pipeline Key Vault",
									"type": "string"
								},
								"db_password_secret_name": {
									"value": "PostgresAdminPassword",
									"type": "string"
								},
								"db_username": {
									"value": "syansb46_admin_user@syansb46-pg-server",
									"type": "string"
								},
								"db_host": {
									"value": "syansb46-pg-server.postgres.database.azure.com",
									"type": "string"
								},
								"db_name": {
									"value": "postgres",
									"type": "string"
								},
								"db_port": {
									"value": "5432",
									"type": "int"
								},
								"ssl_root_path": {
									"value": "/opt/src/BaltimoreCyberTrustRoot.crt.pem",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "pool3prxhf",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string",
						"defaultValue": "testme"
					},
					"StorageAccountName": {
						"type": "string",
						"defaultValue": "rawdata7svgx7"
					},
					"AOI": {
						"type": "string",
						"defaultValue": "-117.063550 32.749467 -116.999386 32.812946"
					},
					"AksManagementRestApiURL": {
						"type": "string",
						"defaultValue": "https://management.azure.com/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourcegroups/syansb46-orc-rg/providers/Microsoft.ContainerService/managedClusters/syansb46orcaks/runCommand?api-version=2022-02-01"
					},
					"PersistentVolumeClaim": {
						"type": "string",
						"defaultValue": "syansb46-vision-fileshare"
					}
				},
				"variables": {
					"Storage_Account_Conn_String": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T05:42:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Custom Vision Model Transforms v2')]",
				"[concat(variables('workspaceId'), '/pipelines/Custom Vision Object Detection v2_aks')]",
				"[concat(variables('workspaceId'), '/notebooks/Insert CV Object Detection Data Into DB Notebook Job')]",
				"[concat(variables('workspaceId'), '/bigDataPools/pool3prxhf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gld')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationFolderPath": {
						"type": "string"
					},
					"DestinationContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DestinationFolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().DestinationContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2 FS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2 FS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rawtifs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/run_container')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/run_fileshare')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2 FS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2 FS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spec_doc_specification')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					},
					"containername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Batch Storage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Batch Storage_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "PackageStorageAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Batch')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBatch",
				"typeProperties": {
					"batchUri": "[parameters('AOI Batch_properties_typeProperties_batchUri')]",
					"poolName": "[parameters('AOI Batch_properties_typeProperties_poolName')]",
					"accountName": "[parameters('AOI Batch_properties_typeProperties_accountName')]",
					"linkedServiceName": {
						"referenceName": "AOI Batch Storage",
						"type": "LinkedServiceReference"
					},
					"accessKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialBatchAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Batch Storage')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Data Storage Account v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Data Storage Account v2_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialStorageAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Geospatial v2 FS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Geospatial v2 FS_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialStorageAccountKey"
					},
					"fileShare": "volume-a"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Geospatial v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AOI Geospatial v2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Pipeline Key Vault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AOI Pipeline Key Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GenBase64Encoding')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('GenBase64Encoding_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GenBase64EncondingFunctionKey"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syansb46-pipeline-syn-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syansb46-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syansb46-pipeline-syn-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syansb46-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadSpecDocumentFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spec_doc_specification",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"name": "sink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source",
						"source sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/spec_doc_specification')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Insert CV Object Detection Data Into DB Notebook Job')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "pool3prxhf",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2d4c91ee-a607-4614-a073-c8889edb97be"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourceGroups/syansb46-pipeline-rg/providers/Microsoft.Synapse/workspaces/syansb46-pipeline-syn-ws/bigDataPools/pool3prxhf",
						"name": "pool3prxhf",
						"type": "Spark",
						"endpoint": "https://syansb46-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pool3prxhf",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"storage_account_name = ''\n",
							"container_name = ''\n",
							"folder_path = 'pool-geolocation'\n",
							"key_vault_name = ''\n",
							"storage_account_key_secret_name = 'GeospatialStorageAccountKey'\n",
							"linked_service_name = 'AOI Pipeline Key Vault'\n",
							"db_password_secret_name = 'PostgresAdminPassword'\n",
							"db_username = ''\n",
							"db_host = ''\n",
							"db_name = 'postgres'\n",
							"db_port = '5432'\n",
							"ssl_root_path = '/opt/src/BaltimoreCyberTrustRoot.crt.pem'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"tags": []
						},
						"source": [
							"# Copyright (c) Microsoft Corporation.\n",
							"# Licensed under the MIT license.\n",
							"\n",
							"import json\n",
							"import psycopg2\n",
							"from azure.storage.blob import BlobServiceClient\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql import SparkSession\n",
							"\n",
							"def save_blob(file_name: str, file_content):\n",
							"\n",
							"    # Get full path to the file\n",
							"    download_file_path = file_name\n",
							"\n",
							"    # for nested blobs, create local path as well!\n",
							"    # os.makedirs(os.path.dirname(download_file_path), exist_ok=True)\n",
							"    with open(download_file_path, \"wb\") as file:\n",
							"      file.write(file_content)\n",
							"\n",
							"def download_file_from_storage_account(storage_account_name: str, storage_account_key: str, container_name: str, folder_path: str,  file_name: str):\n",
							"\n",
							"    storage_account_url = f'https://{storage_account_name}.blob.core.windows.net'\n",
							"\n",
							"    blob_service_client_instance = BlobServiceClient(\n",
							"        account_url=storage_account_url, credential=storage_account_key)\n",
							"\n",
							"    blob_client_instance = blob_service_client_instance.get_blob_client(\n",
							"        container_name, f'{folder_path}/{file_name}', snapshot=None)\n",
							"\n",
							"    blob_data = blob_client_instance.download_blob()\n",
							"    \n",
							"    data = blob_data.readall()\n",
							"\n",
							"    save_blob(file_name, data)\n",
							"\n",
							"if __name__ == \"__main__\":\n",
							"\n",
							"    sc = SparkSession.builder.getOrCreate()\n",
							"    token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"\n",
							"    print(db_password_secret_name)\n",
							"    storage_account_key = token_library.getSecret(key_vault_name, storage_account_key_secret_name, linked_service_name)\n",
							"    db_password = token_library.getSecret(key_vault_name, db_password_secret_name, linked_service_name)\n",
							"\n",
							"    mssparkutils.fs.mount(\n",
							"        f'abfss://{container_name}@{storage_account_name}.dfs.core.windows.net', \n",
							"        f'/{container_name}', \n",
							"        {\"accountKey\": storage_account_key}\n",
							"    )\n",
							"\n",
							"    mssparkutils.fs.unmount(f'/{container_name}') \n",
							"    files = mssparkutils.fs.ls(f'abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{folder_path}')\n",
							"\n",
							"    try:\n",
							"        connection = psycopg2.connect(user=db_username,\n",
							"                                    password=db_password,\n",
							"                                    host=db_host,\n",
							"                                    port=db_port,\n",
							"                                    database=db_name,\n",
							"                                    sslmode='require',\n",
							"                                    sslrootcert=ssl_root_path)\n",
							"        cursor = connection.cursor()\n",
							"\n",
							"        for file in files:\n",
							"            if not file.isDir and file.name.endswith('.geojson'):\n",
							"\n",
							"                download_file_from_storage_account(storage_account_name, storage_account_key, container_name, folder_path, file.name)\n",
							"\n",
							"                # Opening JSON file\n",
							"                f = open(file.name)\n",
							"\n",
							"                # returns JSON object as a dictionary\n",
							"                json_data = json.load(f)\n",
							"                data = json.dumps(json_data)\n",
							"\n",
							"                postgres_insert_query = \"\"\"\n",
							"                    WITH data AS (SELECT '__data_from_file__'::json AS fc)\n",
							"                    INSERT INTO aioutputmodelschema.cvmodel (id, location, probability, tagid, tagname, tile)\n",
							"                    (SELECT\n",
							"                    row_number() OVER () AS id,\n",
							"                    ST_SetSRID(ST_AsText(ST_GeomFromGeoJSON(feat->>'geometry')), 4326) AS location,\n",
							"                    (feat->'properties'->'probability')::jsonb::numeric AS probability,\n",
							"                    feat->'properties'->'tagId' AS tagid,\n",
							"                    feat->'properties'->'tagName' AS tagname,\n",
							"                    feat->'properties'->'tile' AS tile\n",
							"                    FROM (\n",
							"                    SELECT json_array_elements(fc->'features') AS feat\n",
							"                    FROM data\n",
							"                    ) AS f);\n",
							"                    \"\"\"\n",
							"                postgres_insert_query = postgres_insert_query.replace('__data_from_file__', data)\n",
							"\n",
							"                cursor.execute(postgres_insert_query)\n",
							"\n",
							"                connection.commit()\n",
							"                count = cursor.rowcount\n",
							"                print(f'{count} records from {file.name} were successfully inserted into the cvmodel table')\n",
							"\n",
							"    except (Exception, psycopg2.Error) as error:\n",
							"        print(\"Failed to insert record into cvmodel table\", error)\n",
							"\n",
							"    finally:\n",
							"        # closing database connection.\n",
							"        if connection:\n",
							"            cursor.close()\n",
							"            connection.close()\n",
							"            print(\"PostgreSQL connection is closed\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy noop')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pool3prxhf",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Copy noop",
					"file": "abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/copy_noop/src/main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "01767b3a-cede-4abf-8b79-52cb6d0ff80d"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pool Geolocation')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pool3prxhf",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Pool Geolocation",
					"file": "abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/pool_geolocation/src/main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0d715b42-8d99-4e74-8a24-860c7275f387"
					},
					"args": [],
					"jars": [],
					"files": [
						"abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/pool_geolocation/src/utils.py"
					],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transforms')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pool3prxhf",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Transforms",
					"file": "abfss://spark-jobs@synhns3prxhf.dfs.core.windows.net/customvision_transform/src/main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "72aef2fd-aaae-40ed-8a09-7b2e87353ace"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pool3prxhf')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 1
				},
				"nodeCount": 0,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - gdal=3.3.0\n  - pip>=20.1.1\n  - azure-storage-file-datalake\n  - libgdal\n  - shapely\n  - pyproj\n  - pip:\n    - rasterio\n    - geopandas\n    - psycopg2\n",
					"filename": "/Users/seyan/Documents/workspace/Orbital-Analytics/Azure-Orbital-Analytics-Samples/deploy/environment.yml",
					"time": "2022-06-28T22:51:02.1781506Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus3"
		}
	]
}