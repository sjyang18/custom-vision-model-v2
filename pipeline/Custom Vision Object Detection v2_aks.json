{
	"name": "Custom Vision Object Detection v2_aks",
	"properties": {
		"activities": [
			{
				"name": "Pool Geolocation",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "Copy Xml",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy Json",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"sparkJob": {
						"referenceName": "Pool Geolocation",
						"type": "SparkJobDefinitionReference"
					},
					"file": "abfss://spark-jobs@synhnslofkzx.dfs.core.windows.net/pool_geolocation/src/main.py",
					"args": [
						"--storage_account_name",
						"@pipeline().parameters.StorageAccountName",
						"--storage_container",
						"@pipeline().parameters.Prefix",
						"--src_folder_name",
						"detections",
						"--key_vault_name",
						"syansb21-pipeline-kv",
						"--storage_account_key_secret_name",
						"GeospatialStorageAccountKey",
						"--linked_service_name",
						"AOI Pipeline Key Vault"
					],
					"targetBigDataPool": {
						"referenceName": "poollofkzx",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Medium",
					"conf": {
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 3
					},
					"driverSize": "Medium",
					"numExecutors": 2
				}
			},
			{
				"name": "Copy Tiles",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "Read Spec Document",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"sparkJob": {
						"referenceName": "Copy noop",
						"type": "SparkJobDefinitionReference"
					},
					"file": "abfss://spark-jobs@synhnslofkzx.dfs.core.windows.net/copy_noop/src/main.py",
					"args": [
						"--storage_account_name",
						"@pipeline().parameters.StorageAccountName",
						"--src_container",
						"@pipeline().parameters.Prefix",
						"--src_folder",
						"tiles",
						"--key_vault_name",
						"syansb21-pipeline-kv",
						"--storage_account_key_secret_name",
						"GeospatialStorageAccountKey",
						"--linked_service_name",
						"AOI Pipeline Key Vault",
						"--dst_fileshare",
						"volume-a",
						"--dst_folder",
						"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
						"--folders_to_create",
						"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
						"--folders_to_create",
						"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
						"--folders_to_create",
						"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['logsDirectory'])"
					],
					"targetBigDataPool": {
						"referenceName": "poollofkzx",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Medium",
					"conf": {
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 3
					},
					"driverSize": "Medium",
					"numExecutors": 2
				}
			},
			{
				"name": "Copy Config file",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "Copy Tiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"sparkJob": {
						"referenceName": "Copy noop",
						"type": "SparkJobDefinitionReference"
					},
					"file": "abfss://spark-jobs@synhnslofkzx.dfs.core.windows.net/copy_noop/src/main.py",
					"args": [
						"--storage_account_name",
						"@pipeline().parameters.StorageAccountName",
						"--src_container",
						"@pipeline().parameters.Prefix",
						"--src_folder",
						"@concat('config/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])",
						"--key_vault_name",
						"syansb21-pipeline-kv",
						"--storage_account_key_secret_name",
						"GeospatialStorageAccountKey",
						"--linked_service_name",
						"AOI Pipeline Key Vault",
						"--dst_fileshare",
						"volume-a",
						"--dst_folder",
						"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])"
					],
					"targetBigDataPool": {
						"referenceName": "poollofkzx",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Medium",
					"conf": {
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 3
					},
					"driverSize": "Medium",
					"numExecutors": 2
				}
			},
			{
				"name": "Copy Json",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Until1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "AzureFileStorageReadSettings",
							"recursive": true,
							"wildcardFolderPath": {
								"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/json')",
								"type": "Expression"
							},
							"wildcardFileName": "*.json",
							"deleteFilesAfterCompletion": false
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "gls",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "gld",
						"type": "DatasetReference",
						"parameters": {
							"DestinationFolderPath": "detections",
							"DestinationContainerName": {
								"value": "@pipeline().parameters.Prefix",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Copy Xml",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Until1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "AzureFileStorageReadSettings",
							"recursive": true,
							"wildcardFolderPath": {
								"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/other')",
								"type": "Expression"
							},
							"wildcardFileName": "*.xml",
							"deleteFilesAfterCompletion": false
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "gls",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "gld",
						"type": "DatasetReference",
						"parameters": {
							"DestinationFolderPath": "detections",
							"DestinationContainerName": {
								"value": "@pipeline().parameters.Prefix",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Read Spec Document",
				"type": "ExecuteDataFlow",
				"dependsOn": [],
				"policy": {
					"timeout": "1.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "ReadSpecDocumentFlow",
						"type": "DataFlowReference",
						"datasetParameters": {
							"source": {
								"filename": "custom_vision_object_detection.json",
								"folderpath": "config",
								"containername": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "None",
					"cacheSinks": {
						"firstRowOnly": true
					}
				}
			},
			{
				"name": "Copy Xml From Convert Transform",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "Copy Tiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"sparkJob": {
						"referenceName": "Copy noop",
						"type": "SparkJobDefinitionReference"
					},
					"file": "abfss://spark-jobs@synhnslofkzx.dfs.core.windows.net/copy_noop/src/main.py",
					"args": [
						"--storage_account_name",
						"@pipeline().parameters.StorageAccountName",
						"--src_container",
						"@pipeline().parameters.Prefix",
						"--src_folder",
						"convert/output.png.aux.xml",
						"--key_vault_name",
						"syansb21-pipeline-kv",
						"--storage_account_key_secret_name",
						"GeospatialStorageAccountKey",
						"--linked_service_name",
						"AOI Pipeline Key Vault",
						"--dst_fileshare",
						"volume-a",
						"--dst_folder",
						"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'], '/output.png.aux.xml')"
					],
					"targetBigDataPool": {
						"referenceName": "poollofkzx",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Medium",
					"conf": {
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 3
					},
					"driverSize": "Medium",
					"numExecutors": 2
				}
			},
			{
				"name": "Gen Kubectl Spec",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set KubeCmdSpec template",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "KubeCmdSpec",
					"value": {
						"value": "@replace(variables('KubeCmdSpecTemplate'), '__run_id__', pipeline().RunId)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set KubeCmdSpec template",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Copy Config file",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy Xml From Convert Transform",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "KubeCmdSpecTemplate",
					"value": "{\n    \"apiVersion\": \"batch/v1\",\n    \"kind\": \"Job\",\n    \"metadata\": {\n      \"name\": \"aoi-cv-task\",\n      \"namespace\": \"vision\",\n      \"labels\": {\n        \"run_id\": \"__run_id__\"\n      }\n    },\n    \"spec\": {\n      \"ttlSecondsAfterFinished\": 10,\n      \"template\": {\n        \"spec\": {\n          \"containers\": [\n            {\n              \"name\": \"aoi-cv-task-xyz\",\n              \"image\": \"ghcr.io/azure/azure-orbital-analytics-samples/custom_vision_offline:latest\",\n              \"env\": [\n                {\n                  \"name\": \"APP_INPUT_DIR\",\n                  \"value\": \"/data/testme/in\"\n                },\n                {\n                  \"name\": \"APP_OUTPUT_DIR\",\n                  \"value\": \"/data/testme/out\"\n                },\n                {\n                  \"name\": \"APP_CONFIG_DIR\",\n                  \"value\": \"/data/testme/config.json\"\n                }\n              ],\n              \"volumeMounts\": [\n                {\n                  \"name\": \"azure\",\n                  \"mountPath\": \"/data\"\n                }\n              ]\n            }\n          ],\n          \"volumes\": [\n            {\n              \"name\": \"azure\",\n              \"persistentVolumeClaim\": {\n                \"claimName\": \"syansb21-vision-fileshare\"\n              }\n            }\n          ],\n          \"automountServiceAccountToken\": false,\n          \"restartPolicy\": \"Never\"\n        }\n      }\n    }\n}"
				}
			},
			{
				"name": "Gen SpecZipBase64Encoding Func",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Gen Kubectl Spec",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "base64EncodedZipContent",
					"method": "POST",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"value": "@variables('KubeCmdSpec')",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "GenBase64Encoding",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set SpecZipBase64Encoded",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Gen SpecZipBase64Encoding Func",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "KubeCmdSpecInBase64Encoded",
					"value": {
						"value": "@activity('Gen SpecZipBase64Encoding Func').output.Response",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Invoke Workload in AKS",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set SpecZipBase64Encoded",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://management.azure.com/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourceGroups/syansb21-orc-rg/providers/Microsoft.ContainerService/managedClusters/syansb21-aks2/runCommand?api-version=2022-02-01",
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"method": "POST",
					"body": {
						"value": "@concat(\n'{',\n'\"command\" : \"', 'kubectl apply -f aoi-cv-task.json', '\",',\n'\"context\" : \"', variables('KubeCmdSpecInBase64Encoded'), '\"',\n'}'\n)",
						"type": "Expression"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://management.core.windows.net"
					}
				}
			},
			{
				"name": "Until1",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Invoke Workload in AKS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(variables('KubeJobStatusCheckResult'),'No resources found')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Check Job Status",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Wait",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://management.azure.com/subscriptions/18345cbb-6912-4c9a-9054-6fe5d1c93a63/resourceGroups/syansb21-orc-rg/providers/Microsoft.ContainerService/managedClusters/syansb21-aks2/runCommand?api-version=2022-02-01",
								"connectVia": {
									"referenceName": "AutoResolveIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								},
								"method": "POST",
								"body": {
									"value": "@concat(\n'{',\n'\"command\" : \"', 'kubectl -n vision get jobs --selector run_id=', pipeline().RunId ,' \"',\n'}'\n)",
									"type": "Expression"
								},
								"authentication": {
									"type": "MSI",
									"resource": "https://management.core.windows.net"
								}
							}
						},
						{
							"name": "Set JobStatus",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Check Job Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "KubeJobStatusCheckResult",
								"value": {
									"value": "@activity('Check Job Status').output['properties']['logs']\n\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Wait",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 15
							}
						}
					],
					"timeout": "3.00:00:00"
				}
			}
		],
		"parameters": {
			"Prefix": {
				"type": "string",
				"defaultValue": "testme"
			},
			"BatchName": {
				"type": "string",
				"defaultValue": "mybatch"
			},
			"JobName": {
				"type": "string",
				"defaultValue": "youjob"
			},
			"BatchLocation": {
				"type": "string",
				"defaultValue": "eastus"
			},
			"StorageAccountName": {
				"type": "string",
				"defaultValue": "rawdatadppktx"
			}
		},
		"variables": {
			"KubeCmdSpec": {
				"type": "String"
			},
			"KubeCmdSpecInBase64Encoded": {
				"type": "String"
			},
			"KubeJobStatusCheckResult": {
				"type": "String"
			},
			"KubeCmdSpecTemplate": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2022-03-06T05:52:44Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}